<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>jQuery</title>
      <link href="/2018/10/03/jQuery/"/>
      <url>/2018/10/03/jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="jQuery基本概念"><a href="#jQuery基本概念" class="headerlink" title="jQuery基本概念"></a>jQuery基本概念</h2><p>为什么要学习jQuery?</p><p>js缺点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">widow.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;divs.length; i++)&#123;</span><br><span class="line">divs[i].style.display=<span class="string">"block"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btns"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;divs.length; i++)&#123;</span><br><span class="line">divs[i].innerText = <span class="string">"我是内容"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>入口函数只能一个，如果出现多个，后面的会覆盖前面的</li><li>代码容错性差，容易出错，出错后导致后面的代码不执行</li><li>存在浏览器兼容性，比如innerText在火狐浏览器中不起作用</li><li>DOM操作复杂，实现简单的动画很麻烦</li></ul><p>jQuery说白了就是一个js库，比JavaScript使用的更简单</p><p>js库：就是把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这个js文件就可以了。</p><p>其实学习jQuery就是学习一大堆的API。</p><p>API：应用程序编程接口，说白了，API就是方法。</p><p>方法在调用的时候，都带小括号（）。</p><p>入口函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>)</span>&#123;&#125;;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>jQuery提供了两个顶级对象  $ jQuery 他俩是相等的</p><p>$本质上是一个函数 本质上是一个函数   console.log(typeof $  $);   function</p><h2 id="DOM对象和jQuery对象"><a href="#DOM对象和jQuery对象" class="headerlink" title="DOM对象和jQuery对象"></a>DOM对象和jQuery对象</h2><ol><li><p>基本概念</p><p>DOM对象：通过DOM的方式获取页面元素。</p><p>jQuery对象：通过jQuery方式获取页面元素。</p></li><li><p>DOM对象和jQuery对象关系</p><p>jQuery对象是伪数组形式，内部保存了DOM对象，所以可以称jQuery对象是DOM对象的包装集。</p><p>其实jQuery对象是一个数组结构，伪数组形式的。</p></li><li><p>功能区别</p></li></ol><p>​        DOM对象只能使用DOM功能，jQuery对象只能使用jQuery功能。</p><ol><li><p>转换方式</p><ul><li>转为jQuery对象：将DOM对象传入到$()中。</li></ul><p>​     $(box).text(‘这是新内容’);</p><ul><li>转为DOM对象</li></ul><p>​      按照索引取值：<code>$box[0].innerHTML = &#39;这是新内容&#39;</code></p><p>​       使用get方法，传入索引值：<code>$box.get(0).innerHTML = &#39;这是新内容&#39;</code></p></li></ol><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><p>优先级： ！important  &gt; id选择器 &gt; 类选择器（伪类）&gt; 标签选择器 &gt;通配符*</p><ol><li>交集选择器 </li></ol><p>$(‘div.box’).text(‘这是类名为box的div’);   意为类名为box且是div的元素</p><ol><li>并集选择器</li></ol><p>$(‘.box, span’).text(‘这是标签’)；  意为只要有类名box，或span就能实现</p><ol><li>自代选择器</li></ol><p>$(‘#list&gt;li’).css(‘backgroundColor’, red);  就光它后面一代</p><ol><li>后代选择器</li></ol><p>$(‘#list&gt;li’).css(‘backgroundColor’, red);</p><p>过滤选择器：</p><ol><li>获取索引为奇数的元素</li></ol><p>$(‘li:odd’).text(‘这是奇数’);</p><ol><li>获取索引为偶数的元素</li></ol><p>$(‘li:even’).text(‘这是偶数’);</p><ol><li>指定索引获取 .eq()</li></ol><p>$(‘li’).eq(index).text(‘这是第三个li’)； 从0开始的</p><p>$(‘li:eq(‘+index+’)’).text(‘这是li’);   利用字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性选择器</p><p>[ele] 找属性为ele的元素</p><p>[ele=value] 找属性ele且为value的元素，这个属性只能有一个值，且值为value</p><p>[ele^=value] 找属性ele且以value 开头的元素即可</p><p>[ele*=value] 找属性ele且包含value的元素，只要包含即可</p><p>[ele$=value]找属性ele且末尾为value的元素，所以这里的属性值可以为多个</p><h2 id="jQuery的两大特性"><a href="#jQuery的两大特性" class="headerlink" title="jQuery的两大特性"></a>jQuery的两大特性</h2><ol><li>隐式迭代（会偷偷的遍历）</li></ol><p>功能好处：在任意的<strong>设置型操作</strong>时不需要进行遍历操作，比如给li设置内容，但对于任意的<strong>获取型操作无法进行隐式迭代</strong>。</p><p>例如现在获取以下样式只能获取第一个</p><p>console.log($(‘div’).css(‘width’));   结果为1200px</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:1200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:1200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>链式编程</li></ol><p>功能：可以在任意的设置型操作后均可以继续操作当前的对象。</p><p>$(‘.box’).css(‘width:200px’).text(‘内容’).css(‘height:200px’);</p><p>对于获取型操作则不行，因为它返回的是获取的内容，无法继续进行了</p><h2 id="设置事件"><a href="#设置事件" class="headerlink" title="设置事件"></a>设置事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>= <span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是box内的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>最基础的设置事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是点击事件'</span>)；</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>bind() 用于方便对事件的管理（多个）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">'click mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'这是事件'</span>)；</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二种方式 （方法）</span></span><br><span class="line">$(<span class="string">'#btn'</span>).bind(&#123;</span><br><span class="line">    click：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这是点击事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mouseover: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是移入事件'</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>delegate()委托事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).delegate(<span class="string">'p'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是点击的p标签'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>on() 统一了所有的事件设置方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 普通的事件设置方式</span></span><br><span class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是点击事件'</span>)；</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 对事件的管理</span></span><br><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'这是事件'</span>)；</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二种方式 （方法）</span></span><br><span class="line">$(<span class="string">'#btn'</span>).on(&#123;</span><br><span class="line">    click：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这是点击事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mouseover: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是移入事件'</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 事件委托</span></span><br><span class="line">$(<span class="string">'#box'</span>).on(<span class="string">'click'</span>, <span class="string">'p'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'这是各种p标签'</span>)； </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件的移除方式"><a href="#事件的移除方式" class="headerlink" title="事件的移除方式"></a>事件的移除方式</h2><p>bind() ——undind()</p><p>delegate()—-undelgate()</p><p>on()——–off()  使用方法都一样，详细说一下on和off方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$('#btn').on('click', function()&#123;</span><br><span class="line">    1. <span class="selector-tag">off</span>() 不传参表示移除所有的事件</span><br><span class="line">    $('#box').off();</span><br><span class="line">    2. <span class="selector-tag">off</span>() 传参为事件类型，用于移除指定类型的事件</span><br><span class="line">    $('#box').off('click');</span><br><span class="line">    3. off('事件类型'，'**');  移除事件委托</span><br><span class="line">    $('#box').on('click', '**');</span><br><span class="line">    4.off('click', fn) 指定事件处理程序移除</span><br><span class="line">    $('#box').off('click', fun);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>end() 调用后可以得到上一次操作的对象。</p><p>jQuery中的遍历，也就是差找元素</p><p>在DOM中水平遍历</p><ol><li>筛选选择器  其实都是方法形式， 就是为了完善链式编程的写法</li></ol><p>children()  子代选择器  可以获取所有的子代元素</p><p>find() 后代选择器  </p><p>siblings() 返回被选元素的所有同级元素。如何加参数则可以过滤获取同胞元素，参数为元素</p><p>next() 返回被选元素的下一个同级元素，只能返回一个元素</p><p>netAll() 方法返回被选元素的所有跟随的同胞元素</p><p>nextUntil() 返回介于两个给定参数之间的所有同胞元素 ，要有参数的</p><p>prev(), prevAll(), prevUntil() 方法跟上面类似的</p><p>text() 方法方法设置或返回被选元素的文本内容。 </p><h2 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h2><ol><li>添加类名  addClass()  参数为字符串，表示要添加的类名，可以多个，加空格、</li><li>移除类名   removeClass() 参数为字符串, 不传默认移除所有，传就代表移除单个</li><li>切换类名   toggleClass()   功能： 如果传入的类名存在，会被移除，如果不存在，会被添加</li><li>检测类名   hasClass()    返回值，布尔值。<ol><li>当检测一个元素的多个类名时，尽管都存在，但如果顺序不同也会返回false</li><li>多个元素进行类名检测时，只要任意一个元素具有类名，就会返回true</li></ol></li></ol><h2 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h2><p>return false 在jQuery中既可以取消默认事件效果，还可以阻止事件的传播，但由于同时具有两个效果所有使用的时候不灵活，如果希望分别指向某种功能，可以设置其中一个方法为preventDefault,stopPropagation 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 取消默认事件效果</span></span><br><span class="line">$(<span class="string">'a'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   e.preventDefault(); <span class="comment">//// 取消默认事件效果</span></span><br><span class="line">   e.stopPropagation(); <span class="comment">//阻止事件传播</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h2><p>插件有两种形式，要不就是基于原功能扩展（color），要不就是添加新功能（lazyload）。</p><h4 id="lazyload"><a href="#lazyload" class="headerlink" title="lazyload"></a>lazyload</h4><p>lazyload插件一种图片懒加载的插件，它可以延迟图片加载，浏览器视野以外的区域不被加载，直到用户滚到才被加载，这样可以加快浏览器的解析，服务器压力。是一个基于jQuery的插件，所以要先引入jQuery再引入lazyload。</p><p>初始化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"lazy"</span> <span class="attr">data-original</span>=<span class="string">"1.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"img.lazy"</span>).lazyload();</span><br></pre></td></tr></table></figure><p>在同级设置个盒子，高度很高，用于当页面走到这个位置时再展示。</p><h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bada55</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"go"</span>&gt;</span>Simple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sat"</span>&gt;</span>Desaturate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="string">"#go"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    jQuery(<span class="string">"#block"</span>).animate(&#123;</span><br><span class="line">        backgroundColor: <span class="string">"#abcdef"</span></span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">&#125;);</span><br><span class="line">jQuery(<span class="string">"#sat"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    jQuery(<span class="string">"#block"</span>).animate(&#123;</span><br><span class="line">        backgroundColor: jQuery.Color(&#123; <span class="attr">saturation</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ol><li><p>show()显示 hide() 隐藏</p><p>参数： 1，运动的时间，毫秒单位。2. 函数，运动完毕后执行的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).show(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'box运动完毕了'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>滑入，滑出</p><ul><li>sideDown() 滑入，下拉<ul><li>运动时间：毫秒单位 默认为400ms, fast为200ms, normal为400, slow为600</li><li>函数参数： 运动完毕后执行的操作</li></ul></li><li>slideUP() 滑出， 上拉</li><li>slideToggle() 切换</li></ul></li><li><p>淡入淡出</p><ul><li>fadeIn（）渐入<ul><li>参数1：时间</li><li>参数2：完成后执行的函数</li></ul></li><li>fadeOut()  渐出</li><li>fadeToggle（）切换</li><li>fadeTo（）透明度<ul><li>参数1： 时间</li><li>参数2： 0-1</li><li>参数3： 完成后执行的参数</li></ul></li></ul></li><li><p>animate() 动画</p><ul><li>参数1： 要修改的样式，对象结构，是唯一必选参数，CSS属性</li><li>参数2：时间</li><li>参数3：运动模式， linear 匀速， swing变速</li><li>参数4： 运动完执行后的操作</li></ul><p>默认地，所有 HTML 元素都有一个静态位置，且无法移动。</p><p>如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute！</p></li></ol><p>   使用相对值：（该值相对于元素的当前值），需要在值前面加上 += 或 -=</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'btn'</span>).animate(&#123;</span><br><span class="line">    left: <span class="string">'250px'</span>,</span><br><span class="line">    width: <span class="string">'+=150px'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   使用预定义的值： 可以吧属性的动画设置为”show”, “hide”, “toggle”</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'btn'</span>).animate(&#123;</span><br><span class="line">    height: <span class="string">'toggle'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>   使用队列功能</p><p>   这意味着如果您在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的“内部”队列。然后逐一运行这些 animate 调用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div=$(<span class="string">"div"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h2><p>jQuery的隐式迭代，其实不需要我们进行遍历了。但当我们需要设置的操作是不同时，就无法进行隐式迭代了，就必须我们自己进行遍历操作。这种手动的遍历方式称为显示迭代。</p><p>比如：给五个<code>div</code>设置不同的<code>width</code> ,此时我们就需要自己进行遍历操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; $div.length; i++)&#123;</span><br><span class="line"><span class="comment">//$(div)[i]结果为DOM对象，所以需要进行转换操作 $($(div)[i])</span></span><br><span class="line">     $div.eq(i).css(<span class="string">'height'</span>, <span class="number">110</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jQuery中提供了一个方法用于进行遍历操作 each（）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$div.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span><br><span class="line">index - 就相当于<span class="keyword">for</span>中的i</span><br><span class="line">    element - 就相当于<span class="keyword">for</span>中的$div[i] DOM对象，需要进行对象转换</span><br><span class="line">    $(element).css(<span class="string">'width'</span>, <span class="number">110</span> + index * <span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><ul><li>html() 就相当于innerHTML</li><li>使用结构字符串传入到$()中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $span = $(<span class="string">'&lt;span class="box"&gt;这是span&lt;/span&gt;'</span>);</span><br></pre></td></tr></table></figure><h2 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h2><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>由于jQuery具有隐式迭代的特性,移动后元素可能会同时出现多个位置，所以不要设置id</p><ol><li><p>append() 将元素添加到指定元素内部的子元素最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).append($(<span class="string">'.text'</span>));</span><br></pre></td></tr></table></figure></li><li><p>prepend() 将元素添加到指定元素内部的子元素最前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).prepend($(<span class="string">'.text'</span>));</span><br></pre></td></tr></table></figure></li><li><p>after() 将元素添加到指定元素的后面（同级位置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.item'</span>).after($(<span class="string">'.text'</span>));</span><br></pre></td></tr></table></figure></li><li><p>before() 添加到同级前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.item'</span>).before($(<span class="string">'.text'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>这是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>appendTo() , prependTo(), insertAfter(),  insertBefore()  和上面几个相对于</p></li></ol><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><ol><li>html()  设置为空</li><li>empty()  清空元素内部的内容</li><li>remove() 移除当前元素</li></ol><h4 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h4><p>clone() 参数false 为只拷贝完整的结构，参数true 不仅进行结构的拷贝，还会复杂事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).append($(<span class="string">'.box'</span>).clone(<span class="literal">true</span>));</span><br></pre></td></tr></table></figure><h2 id="标签行内属性操作"><a href="#标签行内属性操作" class="headerlink" title="标签行内属性操作"></a>标签行内属性操作</h2><ol><li><p>prop() 用于操作元素的自带行内属性</p><ul><li><p>设置操作</p><ul><li><p>当设置单个属性时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).prop(<span class="string">'id'</span>, <span class="string">'box1'</span>);</span><br></pre></td></tr></table></figure></li><li><p>当设置多个属性时，用对象的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).prop(&#123;</span><br><span class="line">    id: <span class="string">'box1'</span>,</span><br><span class="line">    class: 'box2'</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接写属性名即可</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'#box'</span>).prop(<span class="string">'id'</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>attr() 用于操作元素的自定义行内属性</p><ul><li><p>设置属性</p><ul><li><p>当设置单个属性时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).attr(<span class="string">'data-hehe'</span>, <span class="string">'新内容'</span>)</span><br></pre></td></tr></table></figure></li><li><p>当设置多个属性时，用对象的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).prop(&#123;</span><br><span class="line">    id: <span class="string">'box1'</span>,</span><br><span class="line">    class: 'box2'</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">'#box'</span>).attr(<span class="string">'data-hehe'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li><p>data() 用于操作元素的自定义行内属性</p><p>使用data方法比attr方法操作更加简单，如果属性设置了<code>data-</code>， 可以不加<code>data-</code>获取时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).data(<span class="string">'data-hehe'</span>, <span class="string">'这是data-hehe的内容'</span>);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'#box'</span>).data(<span class="string">'hehe'</span>));</span><br></pre></td></tr></table></figure></li></ol><h2 id="样式操作方法"><a href="#样式操作方法" class="headerlink" title="样式操作方法"></a>样式操作方法</h2><ol><li>width() 用于获取元素的width属性值（也就是内容）、</li><li>innerWidth() 用于获取元素的width + padding 值</li><li>outerWidth() 用于获取元素的width + padding +  border 值</li><li>outerWidth(true) 用于获取盒模型的总宽度 width + padding + border + margin 值</li></ol><p>设置操作</p><p>无论设置的是哪个方法，均修改的是width值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).width(<span class="number">150</span>);</span><br><span class="line">$(<span class="string">'#box'</span>).innerWidth(<span class="number">150</span>);</span><br><span class="line">$(<span class="string">'#box'</span>).outerWidth(<span class="number">150</span>);</span><br><span class="line">$(<span class="string">'#box'</span>).outerWidth(<span class="number">150</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="页面卷曲尺寸的获取方式"><a href="#页面卷曲尺寸的获取方式" class="headerlink" title="页面卷曲尺寸的获取方式"></a>页面卷曲尺寸的获取方式</h2><p>scrollTop()  卷曲的高度（卷曲的顶部距离）</p><p>scrollleft()  卷曲的宽度 （卷曲的左侧距离）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">页面的卷曲尺寸获取方式：</span><br><span class="line">$(<span class="built_in">window</span>).scrollTop()</span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scroll 滚动事件：当某个元素内的滚动条滚动时，触发事件</span></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">window</span>).scrollTop());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>offset() <ul><li>功能： 用于获取元素到body之间的左侧和顶部距离，数值类型， 可自动设置</li><li>返回值为对象：对象具有left和top两个属性</li><li>注意：1. 它是到body之间的距离，如果套个父元素，有边框等属性时，<code>offset</code>值会有所改变，要减去父元素边框等值。2. 设置时，若元素没定位会自动添加相对定位，不好 </li></ul></li><li>position()  获取的是到定位父盒子之间的距离，返回对象结果，只读  从外边框开始算的</li><li>计算方式与offsetLeft的区别为：margin不属于position方法的计算范围内，在给元素设置定位后，其实就不需要加margin了，这时与以前就相同了。</li></ul><h2 id="设置内容"><a href="#设置内容" class="headerlink" title="设置内容"></a>设置内容</h2><ol><li>text() 设置或返回所选元素的文本内容</li><li>html() 设置或返回所选元素的内容</li><li>val() 设置或返回表单字段的值</li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol><li><p>resize() 方法</p><ol><li><p>当调整浏览器窗口的大小时，触发的<code>resize</code> 事件以及触发事件执行的函数</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- $(widow).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>scroll() 方法</p><ol><li><p>当用户滚到指定元素时，触发的scroll事件。scroll事件适用于所有可滚动的元素和window对象(浏览器窗口);</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- $(widow).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>submit() 表单提交方法</p><ol><li>表单提交时触发的事件</li></ol></li><li><p>change() 方法</p><ol><li><code>change()</code>函数用于为每个匹配元素的change事件绑定处理函数。该函数也可用于触发change事件。此外，你还可以额外传递给事件处理函数一些数据。 </li><li>change事件会在文本内容或选项被更改时触发。该事件仅适用于<code>&lt;input type=&quot;text&quot;&gt;</code>和<code>&lt;textarea&gt;</code>以及<code>&lt;select&gt;</code>。对于text和textarea元素，该事件会在元素失去焦点时发生(文本内容也发生了更改)。 </li></ol></li><li><p>dblclick() 方法</p><ol><li><p>当双击元素时，会发生 dblclick 事件。</p><p>当鼠标指针停留在元素上方，然后按下并松开鼠标左键时，就会发生一次 click。</p><p>在很短的时间内发生两次 click，即是一次 double click 事件。</p><p>dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数。</p></li></ol></li><li><p>load() 方法</p><ol><li><p>当指定的元素（及子元素）已加载时，会发生 load() 事件。</p><p>该事件适用于任何带有 URL 的元素（比如图像、脚本、框架、内联框架）。</p><p>根据不同的浏览器（Firefox 和 IE），如果图像已被缓存，则也许不会触发 load 事件。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery教程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跨域</title>
      <link href="/2018/09/29/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2018/09/29/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="跨域请求是什么"><a href="#跨域请求是什么" class="headerlink" title="跨域请求是什么"></a>跨域请求是什么</h2><ol><li>跨域是指发出请的域名、协议、端口与被访问的域名、协议、端口不一致才产生, 是由浏览器做出的限制而导致的。<ol><li>这里说一下为什么会出现这样原因呢? <ul><li>是因为浏览器的同源策略,会阻止其他网站的访问,同源策略指的是域名,协议,端口,如果访问的时候只要有一个不一样,浏览器就会阻止我们继续去访问这个网址。</li><li>浏览器这样做为了起到网站的安全性。</li></ul></li></ol></li></ol><h2 id="跨域解决的办法"><a href="#跨域解决的办法" class="headerlink" title="跨域解决的办法"></a>跨域解决的办法</h2><ol><li><p>有三种方式, 分别是jsonp CORS和反向代理。</p><ol><li><p>第一种解决方式jsonp, 相对于来说jsonp并不是官方所推荐的,而是有前端工程师用多了,总结而来的</p></li><li><p>第二种解决方式CORS, 是官方所推荐的一种解决方式。</p><ul><li>只需要在访问的后台添加</li></ul></li><li><p>第三种解决方式反向代理。</p><ul><li><p>开启反向代理<br>在Apache中打开配置文件中的<code>vhosts-conf</code>文件,在里面自己配置的域名地址添加两行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启反向代理</span><br><span class="line">ProxyRequests Off</span><br><span class="line"># `/api` 代替 `http://localhost:3000`,等写ajax请求时就可以用`/api`去替代这个地址,这里的`/api`是自己单独写的,可以变化的</span><br><span class="line">ProxyPass /api  http://localhost:3000</span><br></pre></td></tr></table></figure></li><li></li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第二次测试</title>
      <link href="/2018/09/28/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/09/28/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><html 首页摘要=""><br><a id="more"></a></html></p><the rest="" of="" contents="" |="" 余下全文=""><p><a href="https://music.163.com/song?id=862100828&amp;userid=627027521" target="_blank" rel="noopener">https://music.163.com/song?id=862100828&amp;userid=627027521</a></p></the>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何搭建HEOX个人博客</title>
      <link href="/2018/09/28/%E6%90%AD%E5%BB%BAHEXO%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/09/28/%E6%90%AD%E5%BB%BAHEXO%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建一个基于-github-的-HEXO-个人博客"><a href="#搭建一个基于-github-的-HEXO-个人博客" class="headerlink" title="搭建一个基于 github 的 HEXO 个人博客"></a>搭建一个基于 github 的 HEXO 个人博客</h1><h2 id="需要的环境"><a href="#需要的环境" class="headerlink" title="需要的环境"></a>需要的环境</h2><ol><li>node<ol><li>node 就是一个 js 的运行环境而已</li><li>搭建博客需要用到一个辅助工具 <code>hexo-cli</code></li></ol></li><li>npm<ol><li>是包管理器</li><li>在安装 node 的时候会自动一并的安装好</li><li>资源服务器在国外,所以在使用会有可能已经提交了,但没有显示出来,只要等待一些时间即可。</li><li>常用指令<ol><li><code>npm install 包名</code> 或者 <code>npm i 包名</code>    =&gt; 下载</li><li><code>npm uninstall 包名</code>  =&gt; 卸载</li><li><code>npm i 包名@版本号</code>  =&gt; 下载执行版本的包</li></ol></li><li><code>npm i</code>  =&gt; 会检索当前文件夹下面的 package.json 文件<ul><li>直接下载所有依赖</li></ul></li><li>之所以使用它，是因为在使用 <code>hexo-cli</code> 这个工具的时候，也要下载一些依赖</li></ol></li><li>github 的账号<ol><li>因为目前做的是基于 github 的，所以一定要有一个账号</li><li>有一天你作用在自己的服务器，自己的域名上面</li></ol></li><li>git 环境<ol><li>用来上传我们写的内容的</li></ol></li></ol><h2 id="部署一个开发环境"><a href="#部署一个开发环境" class="headerlink" title="部署一个开发环境"></a>部署一个开发环境</h2><ul><li>这个环境只需要一次就可以了</li><li>只需要一个东西</li><li>hexo-cli</li><li>怎么安装<ol><li>用 npm 去下载这个 hexo-cli 脚手架  <code>npm i -g hexo-cli</code></li><li>这个环境就安装完成了</li><li>接下来就是进行 hexo 博客的搭建了</li><li><code>hexo -v</code> 如果能出现版本号就是安装成功了</li></ol></li></ul><h2 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h2><h3 id="第一次搭建"><a href="#第一次搭建" class="headerlink" title="第一次搭建"></a>第一次搭建</h3><ol><li><p>找到一个你喜欢的位置，放置一个文件夹，在文件夹内部打开 cmd </p></li><li><p>初始化一个 博客的文件夹结构（hexo-cli帮我们做）</p><ul><li>会帮我们自动搭建好一个内容的结构</li><li>会自动帮我们下载依赖包 npm i</li><li>已经完成就不需要关了（暂时）</li></ul></li><li><p>是启动一个本地服务器，可以本地预览我的博客</p><ul><li><code>hexo s</code> 这个指令启动本地服务器</li></ul></li><li><p>把他上传到 github，做成一个线上的网站来看，创建一个仓库</p><ul><li>一个 github 账号只能出一个 博客</li><li>仓库名称必须是 <code>你的github账号.github.io</code></li><li>去hexo的文件夹中配置你的仓库信息</li></ul></li><li><p>配置仓库信息</p><ul><li>找到 config.yml 的文件</li><li>拉倒最下面</li><li>找到 type<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:cyfresh/cyfresh.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul></li><li><p>上传文件</p><ul><li><code>hexo generate</code> 部署那些文件准备上线 简写 <code>hexo g</code><ul><li>有可能会报错</li><li>如果报错了 <code>npm i hexo</code></li><li>然后重新执行 <code>hexo g</code></li></ul></li><li>正式上传 <code>hexo deploy</code> 这个是上传的指令 简写 <code>hexo d</code><ul><li>有可能会报错</li><li>如果报错了 <code>npm i hexo-deployer-git</code></li><li>然后重新执行 <code>hexo g</code> 然后 <code>hexo d</code></li></ul></li></ul></li><li><p>上传成功</p><ul><li>线上打开了</li><li>你的github账户.github.io</li><li>settings里面直接点击</li></ul></li><li><p>注意：</p><ul><li>因为 github 的服务器也在国外</li><li>有的时候可能你写完文章上传了，但是你去页面上看没有,过一会就会看到</li></ul></li></ol><h3 id="后期书写和上传"><a href="#后期书写和上传" class="headerlink" title="后期书写和上传"></a>后期书写和上传</h3><ol><li>找到之前建立博客的文件夹，在文件夹内部打开 cmd</li><li>新建一片文章 <code>hexo new 文件名</code></li><li>直接找到文章还是书写</li><li>进行本地测试调试(开启服务器,查看<code>第一次搭建的第三步</code>)</li><li>上传内容<ul><li><code>hexo g</code> </li><li><code>hexo d</code></li></ul></li></ol><h2 id="设置一个皮肤"><a href="#设置一个皮肤" class="headerlink" title="设置一个皮肤"></a>设置一个皮肤</h2><ol><li>百度一下，找到一个自己喜欢的皮肤主题</li><li>克隆下来(git clone + 主题地址)</li><li>克隆下来以后是一个 themes 文件夹，我们要找到这个文件夹里面的内容找主题名称的文件夹（next）</li><li>把 next 这个文件夹放在我们博客的目录内<code>blog/themes</code>,其他的主题颜色类似,只要最终放在themes文件夹即可</li><li>设置主题，来到 config.yml 文件内部（这个是对 hexo 进行的配置）<ul><li>找到 <code>theme: landscape</code></li><li>把后面的名称改成你的主题名称 next</li></ul></li><li>在 themes/next/config.yml 的文件，这个文件是对主题进行的一些配置</li><li>next主题下载地址: <a href="https://github.com/iissnan/hexo-theme-next themes/next" target="_blank" rel="noopener">next主题名下载地址</a></li><li>hexo-theme-yelee主题下载地址: <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="noopener">hexo-theme-yelee主题名下载地址</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/28/hello-world/"/>
      <url>/2018/09/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
